#Checks that there are no occurrences of always @*. Use always_comb instead.
#ENABLED
+always-comb

#Checks that there are no occurrences of non-blocking assignment in combinational logic.
#ENABLED
+always-comb-blocking

#Checks that blocking assignments are, at most, targeting locals in sequential logic.
#ENABLED
+always-ff-non-blocking
+always-ff-non-blocking=catch_modifying_assignments:false
+always-ff-non-blocking=waive_for_locals:false

#Checks for banned declared name against set of unwanted patterns.
#ENABLED
+banned-declared-name-patterns

#Checks that a default case-item is always defined.
#ENABLED
+case-missing-default

#Check that constraint names follow the lower_snake_case convention and end with _c.
#ENABLED
+constraint-name-style

#Checks that the ‘name’ argument of type_id::create() matches the name of the variable to which it is assigned.
#ENABLED
+create-object-name-match

#Checks that there are no occurrences of disable some_label if label is referring to a fork or other none sequential block label. Use disable fork instead
#ENABLED
+disable-statement

#Checks that a Verilog `endif directive is followed by a comment that matches the name of the opening `ifdef or `ifndef.
#ENABLED
+endif-comment

#Checks that enum names use lower_snake_case naming convention and end with ‘_t’ or ‘_e’.
#ENABLED
+enum-name-style

#Checks that every function declared outside of a class is declared with an explicit lifetime (static or automatic).
#ENABLED
+explicit-function-lifetime

#Checks that every function and task parameter is declared with an explicit storage type.
#ENABLED
+explicit-function-task-parameter-type

#Checks that every parameter and localparam is declared with an explicit storage type.
#ENABLED
+explicit-parameter-storage-type=exempt_type:string

#Checks that every task declared outside of a class is declared with an explicit lifetime (static or automatic).
#ENABLED
+explicit-task-lifetime

#Checks that there are no occurrences of consecutive null statements like ;;.
#ENABLED
+forbid-consecutive-null-statements

#Do not use defparam. 
#ENABLED
+forbid-defparam

#Checks that there are no occurrences of \ when breaking the string literal line. Use concatenation operator with braces instead. 
#ENABLED
+forbid-line-continuations

#Checks that no forbidden macro calls are used. 
#ENABLED
+forbidden-macro

#Checks that every generate block statement is labeled.
#ENABLED
+generate-label

#Checks that every generate block label starts with g_ or gen_. 
#ENABLED
+generate-label-prefix

#Checks that interface names use lower_snake_case naming convention and end with _if.
#ENABLED
+interface-name-style

#Checks that no forbidden system tasks or functions are used. These consist of the following functions: $psprintf, $random, and $dist_*. As well as non-LRM function $srandom.
#ENABLED
+invalid-system-task-function

#Checks that there are no generate regions. 
#DISABLED
-legacy-generate-region

#Checks that there are no separate genvar declarations.
#ENABLED
+legacy-genvar-declaration

#Checks that all lines do not exceed the maximum allowed length.
#ENABLED
+line-length
+line-length=length:120

#Checks that every macro name follows ALL_CAPS naming convention. Exception: UVM-like macros.
#ENABLED
+macro-name-style

#Concatenation will not be evaluated here. Use "...” instead. 
#ENABLED
+macro-string-concatenation

#Check for matching begin/end labels.
#ENABLED
+mismatched-labels

#Checks that there are no begin-end blocks declared at the module level.
#ENABLED
+module-begin-block

#If a module is declared, checks that at least one module matches the first dot-delimited component of the file name. Depending on configuration, it is also allowed to replace underscore with dashes in filenames.
#ENABLED
+module-filename=allow-dash-for-underscore:false

#Checks that module instantiations with more than one parameter are passed in as named parameters, rather than positional parameters.
#ENABLED
+module-parameter

#Checks that module instantiations with more than one port are passed in as named ports, rather than positional ports. 
#ENABLED
+module-port

#Checks that no tabs are used. Spaces should be used instead of tabs.
#ENABLED
+no-tabs

#Checks that there are no trailing spaces on any lines.
#ENABLED
+no-trailing-spaces

#Checks that string literals with numeric format specifiers have proper prefixes for hex and bin values and no prefixes for decimal values. 
#ENABLED
+numeric-format-string-style

#Checks that at most one module is declared per file.
#ENABLED
+one-module-per-file

#Checks that the package name matches the filename. Depending on configuration, it is also allowed to replace underscore with dashes in filenames.
#ENABLED
+package-filename=allow-dash-for-underscore:false

#Checks that packed dimension ranges are declare in little-endian (decreasing) order, e.g. [N-1:0].
#ENABLED
+packed-dimensions-range-ordering

#Checks that non-type parameter and localparam names follow at least one of the naming conventions from a choice of CamelCase and ALL_CAPS, ORed together with the pipe-symbol(|). Empty configuration: no style enforcement.
#ENABLED
+parameter-name-style=localparam_style:CamelCase|ALL_CAPS

#Checks that parameter type names follow the lower_snake_case naming convention and end with _t.
#ENABLED
+parameter-type-name-style

#Checks that plusargs are always assigned a value, by ensuring that plusargs are never accessed using the $test$plusargs system task.
#ENABLED
+plusarg-assignment

#Check that port names end with _i for inputs, _o for outputs and _io for inouts. Alternatively, for active-low signals use _n[io], for differential pairs use _n[io] and _p[io].
#DISABLED
-port-name-suffix

#Checks that no parameter name starts with ‘disable’, using positive naming (starting with ‘enable’) is recommended.
#ENABLED
+positive-meaning-parameter-name

#Checks that the file ends with a newline. 
#ENABLED
+posix-eof

#Checks that every parameter declaration is inside a package or in the formal parameter list of modules/classes and every localparam declaration is inside a module or class.
#ENABLED
+proper-parameter-declaration

#Checks that signal names use lower_snake_case naming convention. Signals are defined as “a net, variable, or port within a SystemVerilog design”.
#ENABLED
+signal-name-style

#Checks that struct and union names use lower_snake_case naming convention and end with ‘_t’. 
#ENABLED
+struct-union-name-style

#Recommend extra parentheses around subexpressions where it helps readability.
#ENABLED
+suggest-parentheses

#Checks that numeric literals are not longer than their stated bit-width to avoid undesired accidental truncation.
#ENABLED
+truncated-numeric-literal

#Checks that a Verilog enum declaration is named using typedef.
#ENABLED
+typedef-enums

#Checks that a Verilog struct or union declaration is named using typedef.
#ENABLED
+typedef-structs-unions=allow_anonymous_nested:false

#Checks that the digits of binary literals for the configured bases match their declared width, i.e. has enough padding prefix zeros.
#ENABLED
+undersized-binary-literal=bin:true
+undersized-binary-literal=oct:false
+undersized-binary-literal=hex:false
+undersized-binary-literal=lint_zero:false
+undersized-binary-literal=autofix:true

#Checks that unpacked dimension ranges are declared in big-endian order [0:N-1], and when an unpacked dimension range is zero-based [0:N-1], the size is declared as [N] instead.
#ENABLED
+unpacked-dimensions-range-ordering

#Checks that no `uvm_* macro calls end with ‘;’.
#ENABLED
+uvm-macro-semicolon

#Checks that there are no generate-begin blocks inside a generate region.
#ENABLED
+v2001-generate-begin

#Checks that void casts do not contain certain function/method calls.
#ENABLED
+void-cast
